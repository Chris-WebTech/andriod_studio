// Christopher Miller
// Fall 24
// Drawers, tabs, and Navigation
import 'package:my_calculator_app/widgets/my_widgets.dart';

import 'package:flutter/material.dart';

void main() {
  runApp(MaterialApp(
    home: const MyApp(),
    debugShowCheckedModeBanner: false,
    routes: <String, WidgetBuilder>{
      "/HomePage": (BuildContext context) => const MyApp()
    },
  ));
}

class MyApp extends StatefulWidget {
  // constructor
  const MyApp ({super.key});

  @override
  MyAppState createState() => MyAppState();
}

class MyAppState extends State<MyApp> with SingleTickerProviderStateMixin {
  late TabController _tabController;
  late int _selectedIndex = 0;
  // these controllers are connected to textfields
  TextEditingController tc1 = TextEditingController();
  TextEditingController tc2 = TextEditingController();

// ----------------------------------------------
// -----------  Context Strings  ----------------
// ----------------------------------------------
  // global variable to holding the concatenated string
  String textValue = "0";
  String valOne = "__";
  String valTwo = "__";
  String fct = "0";

  // n! data
  String factorialDisc= """
  n! = n*...3*2*1
  n! = multiplication of all numbers between 1 and n.
  
  EX: 
  3! = 3*2*1 = 6;
  3 items can be arranged 6 different ways
  """;
  String factTabDisc="""
  n!
  
  multiplication of all 
  numbers between 1 and n.
  """;

  // nCr data
  String nCrDisc= "*** Combinations Without Repetition ***"
      "\n\nnCr = n!/ r! * (n-r)!\n"
      "nCr = number of ways of choosing "r" things fro"
      r" iven '""'n'""' things “n” is the total number"
      " of items in the set, “r” is the number of "
      "items to be chosen, “!” denotes factorial, "
      "which is the product of all positive integers from "
      "1 to the given number. \n\nEX:\n3C2 = 3!/(3-2)!*2! = 3 "
      "\n\nnCr represents the number of ways to choose r "
      "items from a set of n distinct items without "
      "regard to the order of selection. Combinations "
      "Formula is one of the countless formulas in the "
      "world of mathematics, which plays a pivotal role "
      "in solving problems.";
  String nCrTabDisc= """
  nCr
  
  number of ways of choosing "r" 
  things from given "n" things
  """;

  // nPr data
  String nPrDisc= """
  *** Combinations With Repetitions ***
  nPr = n!/(n-r)!
  nPr = number of ways of choosing "r" things 
  from given "n" things
  
  “n” is the total number of items in the set,
  “r” is the number of items to be chosen, and
  “!” denotes factorial, which is the product of 
  all positive integers from 1 to the given number.
  EX: 
  3C2 = 3!/(3-2)!*2! = 3
  
  nPr formula is used to find the number of ways in 
  which r different things can be selected and 
  arranged out of n different things. This Formula 
  is also called Permutation Formula.
  """;
  String nPrTabDisc= """
  nPr
  
  number of ways of 
  choosing "r" things 
  from given "n" things
  """;

  // Binomial Distribution data
  String binomDisc = "***  Must have 2 state Solution  ***\n"
      "***  Must have 2 state Solution  ***\n"
      "***  Must be Independent Events  ***\n\n"

      "Binomial Probability Distribution talks about "
      "the probability of success or failure of an "
      "outcome in a series of events. The Binomial "
      "Distribution in Probability maps the outcome "
      "obtained in the form of success or failure, yes "
      "or no, true or false, etc. Each trial done to "
      "obtain the outcome of success or failure is "
      "called the Bernoulli Trial and the probability "
      "distribution for each Bernoulli Trial is called "
      "the Bernoulli Distribution. Let’s learn the "
      "definition and meaning of Binomial Distribution.";
  String distTabDisc= """
  ***  Must have 2 state Solution  ***
  ***  Must have 2 state Solution  ***
  ***  Must be Independent Events  ***
  """;
// ----------   end of context   ----------------
// ----------------------------------------------
// -----------     List Tabs     ----------------

  // Located bellow the Scaffold
  List<Tab>topTab = <Tab>[
    const Tab(icon: Icon(Icons.calculate)),
    const Tab(text: "nCr"),
    const Tab(text: "nPr"),
    const Tab(text: "n!")
  ];

// ----------   end of context   ----------------
// ----------------------------------------------
// -----------     Tab Built     ----------------

  // ----------   My styles   -------------------
  var styleWhite = const TextStyle(color: Colors.white);
  var inputDec   = const InputDecoration(
      focusedBorder: UnderlineInputBorder(
          borderSide: BorderSide(color: Color(0xFF870303))
      ),
      enabledBorder: UnderlineInputBorder(
          borderSide: BorderSide(color: Color(0xffff0165))
      )
  );

// -------  Button Calculator variables -------------
  String displayText= '';
  late int firstNum;
  late int secNum;
  late String xResualts ='';
  late String history = '';
  late String xOperator;

  // Button clicked loops through if statement
  void btnClicked(String btnValue) {
    //print(btnValue);
    // *** btnValue = Eleveted Button text value ***

    if(btnValue == 'C') {
      // Clear input
      displayText = '';
      firstNum = 0;
      secNum = 0;
      xResualts = '';
    } else if(btnValue == 'AC') {
      // Clear history and input
      displayText = '';
      firstNum = 0;
      secNum = 0;
      xResualts = '';
      history = '';

    } else if(btnValue == '+/-') {
      // add integer operation
      if(displayText[0] != '-'){
        xResualts = '-$displayText';
      } else {
        xResualts = displayText.substring(1);
      }
    } else if(btnValue == '<') {
      // Remove Last Number from Input
      xResualts = displayText.substring(0, displayText.length - 1);
    } else if(btnValue == '+' ||
        btnValue == '-' ||
        btnValue == 'X' ||
        btnValue == '/') {
      // No input = no resault
      firstNum = int.parse(displayText);
      xResualts = '';
      xOperator = btnValue;
    } else if(btnValue == '=') {
      // preform Function - display Text
      secNum = int.parse(displayText);
      if(xOperator == '+') {
        // Addition Operation
        xResualts = (firstNum + secNum).toString();
        history = firstNum.toString() +
            xOperator.toString() +
            secNum.toString();
      }
      if(xOperator == '-') {
        // Subtraction Operation
        xResualts = (firstNum - secNum).toString();
        history = firstNum.toString() +
            xOperator.toString() +
            secNum.toString();
      } if(xOperator == 'X') {
        // Multiplication Operation
        xResualts = (firstNum * secNum).toString();
        history = "$firstNum * $secNum";
      } if(xOperator == '/') {
        // Division Operation
        xResualts = (firstNum ~/ secNum).toString();
        history = firstNum.toString() +
            xOperator.toString() +
            secNum.toString();
      }
    } else{
      // xResualts tracking Value of each button press
      xResualts = int.parse(displayText + btnValue).toString();
    }
    // Update State of text being Displayed
    setState(() {
      displayText = xResualts;

    });
  }  // end of button calc void


// -----------  end of function  ----------------
// ----------------------------------------------
// -----------  Assemble Widget  ----------------
  Widget nCrCard() {
    // variables to complete word context1
    valOne = tc1.text;
    valTwo = tc2.text;

    // Create Context
    return contextCard(heading1: const Text("Possible Combinations",
        style: TextStyle(fontWeight: FontWeight.bold,
            color: Colors.white, fontSize: 20)),
        context1: Text(
          "If the sample region is $valOne "
              "And there are $valTwo, then the possible combinations "
              "of choosing distinguished items = $textValue"
          ,
          style: const TextStyle(
            color: Colors.white,
            fontSize: 18.0,
          ),
          textAlign: TextAlign.center,
        )
    );
  }

  Widget nPrCard(){
    valOne = tc1.text;
    valTwo = tc2.text;
    return contextCard(heading1: const Text("Possible Combinations",
        style: TextStyle(fontWeight: FontWeight.bold,
            color: Colors.white, fontSize: 20)
    ),
        context1: Text(
            "If there is a total of $valOne , items to choose from"
                "and you are choosing $valTwo ,replacing the item each time,"
                "then the total possible combinations "
                "of choosing $valTwo items = $textValue"
            ,
            style: const TextStyle(
              color: Colors.white,
              fontSize: 18.0,
            ),
            textAlign: TextAlign.center
        )
    );
  }

  Widget calTab() {
    return ListView(
      padding: const EdgeInsets.all(20),
      children: [
        Column(
          mainAxisAlignment: MainAxisAlignment.end,
          crossAxisAlignment: CrossAxisAlignment.center,
          children: [
            Calc_answer(
              calcHistory: Text(history, style: const TextStyle(
                color: Colors.blueGrey,
                fontSize: 18.0,),),
              calcAnswer: Text(displayText, style: const TextStyle(
                color: Colors.white,
                fontSize: 24.0,),),
            ),
          ],
        ),
        const Divider(
          indent: 10,
          endIndent: 10,
          thickness: 2.0,
          color: Color(0xFFff0156),
        ),
        Column(
          crossAxisAlignment: CrossAxisAlignment.center,
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Row(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [

                CalculatorButton(xValue: 'AC',
                  callBack: btnClicked,
                  // Color(0xFF000000)
                  // 0xFF = the opacity at 100%
                  // Followed by 6 digit HEX value - drop the "#"
                  btnColor: const Color(0xFF121212),
                  outlColor: const Color(0xFF120000),
                  txtColor: const Color(0xFF870303),
                  txtSize: 16.8,
                ),

                CalculatorButton(xValue: 'C',
                  callBack: btnClicked,
                  btnColor: const Color(0xFF121212),
                  outlColor: const Color(0xFF120000),
                  txtColor: const Color(0xFF00ad34),
                  txtSize: 26,
                ),

                CalculatorButton(xValue: '<',
                  callBack: btnClicked,
                  btnColor: const Color(0xFF121212),
                  outlColor: const Color(0xFF120000),
                  txtColor: const Color(0xFF00ad34),
                  txtSize: 28,
                ),

                CalculatorButton(xValue: '/',
                  callBack: btnClicked,
                  btnColor: const Color(0xFF121212),
                  outlColor: const Color(0xFF120000),
                  txtColor: const Color(0xFF00ad34),
                  txtSize: 28,
                ),
              ],
            ),

            Row(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                CalculatorButton(xValue: '1',
                  callBack: btnClicked,
                  btnColor: const Color(0x00FF0000),
                  outlColor: const Color(0xFFff0156),
                  txtColor: const Color(0xFFFFFFFF),
                  txtSize: 22,
                ),

                CalculatorButton(xValue: '2',
                  callBack: btnClicked,
                  btnColor: const Color(0x00FF0000),
                  outlColor: const Color(0xFFff0156),
                  txtColor: const Color(0xFFFFFFFF),
                  txtSize: 22,
                ),

                CalculatorButton(xValue: '3',
                  callBack: btnClicked,
                  btnColor: const Color(0x00FF0000),
                  outlColor: const Color(0xFFff0156),
                  txtColor: const Color(0xFFFFFFFF),
                  txtSize: 22,
                ),

                CalculatorButton(xValue: 'X',
                  callBack: btnClicked,
                  btnColor: const Color(0xFF121212),
                  outlColor: const Color(0xFF120000),
                  txtColor: const Color(0xFF00ad34),
                  txtSize: 24,
                ),
              ],
            ),

            Row(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                CalculatorButton(xValue: '4',
                  callBack: btnClicked,
                  btnColor: const Color(0x00FF0000),
                  outlColor: const Color(0xFFff0156),
                  txtColor: const Color(0xFFFFFFFF),
                  txtSize: 22,
                ),

                CalculatorButton(xValue: '5',
                  callBack: btnClicked,
                  btnColor: const Color(0x00FF0000),
                  outlColor: const Color(0xFFff0156),
                  txtColor: const Color(0xFFFFFFFF),
                  txtSize: 22,
                ),

                CalculatorButton(xValue: '6',
                  callBack: btnClicked,
                  btnColor: const Color(0x00FF0000),
                  outlColor: const Color(0xFFff0156),
                  txtColor: const Color(0xFFFFFFFF),
                  txtSize: 22,
                ),

                CalculatorButton(xValue: '-',
                  callBack: btnClicked,
                  btnColor: const Color(0xFF121212),
                  outlColor: const Color(0xFF120000),
                  txtColor: const Color(0xFF00ad34),
                  txtSize: 42,
                ),
              ],
            ),

            Row(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                CalculatorButton(xValue: '7',
                  callBack: btnClicked,
                  btnColor: const Color(0x00FF0000),
                  outlColor: const Color(0xFFff0156),
                  txtColor: const Color(0xFFFFFFFF),
                  txtSize: 22,
                ),

                CalculatorButton(xValue: '8',
                  callBack: btnClicked,
                  btnColor: const Color(0x00FF0000),
                  outlColor: const Color(0xFFff0156),
                  txtColor: const Color(0xFFFFFFFF),
                  txtSize: 22,
                ),

                CalculatorButton(xValue: '9',
                  callBack: btnClicked,
                  btnColor: const Color(0x00FF0000),
                  outlColor: const Color(0xFFff0156),
                  txtColor: const Color(0xFFFFFFFF),
                  txtSize: 22,
                ),

                CalculatorButton(xValue: '+',
                  callBack: btnClicked,
                  btnColor: const Color(0xFF121212),
                  outlColor: const Color(0xFF120000),
                  txtColor: const Color(0xFF00ad34),
                  txtSize: 30,
                ),
              ],
            ),

            Row(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                CalculatorButton(xValue: '+/-',
                  callBack: btnClicked,
                  btnColor: const Color(0xFF121212),
                  outlColor: const Color(0xFF120000),
                  txtColor: const Color(0xFF00ad34),
                  txtSize: 17.2,
                ),

                CalculatorButton(xValue: '0',
                  callBack: btnClicked,
                  btnColor: const Color(0x00FF0000),
                  outlColor: const Color(0xFFff0156),
                  txtColor: const Color(0xFFFFFFFF),
                  txtSize: 28,
                ),

                CalculatorButton(xValue: '00',
                  callBack: btnClicked,
                  btnColor: const Color(0xFF121212),
                  outlColor: const Color(0xFF120000),
                  txtColor: const Color(0xFF00ad34),
                  txtSize: 19,
                ),

                CalculatorButton(xValue: '=',
                  callBack: btnClicked,
                  btnColor: const Color(0xFF00ad34),
                  outlColor: const Color(0xFF120012),
                  txtColor: const Color(0xFFFFFFFF),
                  txtSize: 35,
                ),
              ],
            ),
          ],
        ),
      ],
    );
  }

  Widget ncrTab() {
    return ListView(
      children: [
        Image.asset('assets/images/photo1.jpg'),
        Column(
          children: [
            userInput(
                input1Disc: const Text("Sample Space:",
                  style: TextStyle(fontSize: 20, color: Colors.white),),
                tc1Input: SizedBox(
                  width: 120,
                  height: 50,
                  child: TextField(
                    controller: tc1, keyboardType: TextInputType.number,
                    cursorColor: Colors.red,
                    decoration: inputDec,
                    style: styleWhite,
                    textAlign: TextAlign.end,
                  ),
                ),
                input2Disc:  const Text("Number of Items:",
                  style: TextStyle(fontSize: 18, color: Colors.white),),
                tc2Input: SizedBox(
                  width: 120,
                  height: 50,
                  child: TextField(
                    controller: tc2, keyboardType: TextInputType.number,
                    cursorColor: Colors.red,
                    decoration: inputDec,
                    style: styleWhite,
                    textAlign: TextAlign.end,
                  ),
                )
            ),

            const Divider(
              height: 25,
              indent: 20,
              endIndent: 20,
              thickness: 2.0,
              color: Color(0xFFff0156),
            ),
            const Divider(
              height: 90,
              indent: 20,
              endIndent: 20,
              thickness: 2.0,
              color: Color(0x0F000000),
            ),

            Container(
              child: (
                  Column ( children: [
                    nCrCard(),
                  ])
              ),
            ),

            Row(
              crossAxisAlignment: CrossAxisAlignment.center,
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                // ----------- Buttons -------------
                ElevatedButton(
                  onPressed: nCrFunction,
                  style: ElevatedButton.styleFrom(
                    shape: RoundedRectangleBorder(
                      side: const BorderSide(
                        width: 2.0, // Border width
                        color: Color(0xFF120012), // Border color
                      ),
                      borderRadius: BorderRadius.circular(40.0), // Border radius
                    ),
                    backgroundColor: const Color(0xFF00ad34),
                  ),
                  child: const Text("nCr", style: TextStyle(
                      color: Colors.white,
                      fontSize: 22,
                      fontWeight: FontWeight.bold)
                  ),
                ),
                const Divider(
                    endIndent: 25,
                    thickness: 0.0
                ),

                ElevatedButton(
                    onPressed: onPressed,
                    style: ElevatedButton.styleFrom(
                      shape: RoundedRectangleBorder(
                        side: const BorderSide(
                          width: 2.0, // Border width
                          color: Color(0xFF120012), // Border color
                        ),
                        borderRadius: BorderRadius.circular(40.0), // Border radius
                      ),
                      backgroundColor: const Color(0xFF121212),
                    ),
                    child: const Text("C/A", style: TextStyle(
                        color: Color(0xFF870303),
                        fontSize: 22,
                        fontWeight: FontWeight.bold)
                    )
                ),
              ],),

            const Divider(
              height: 115,
              indent: 20,
              endIndent: 20,
              thickness: 0.0,
              color: Color(0x0F000000),

            ),
            Container(
              decoration: BoxDecoration(
                border: Border.all(color: const Color(0xFFff0156)),
                borderRadius: BorderRadius.circular(10.0),
              ),
              margin: const EdgeInsets.all(10),
              padding: const EdgeInsets.all(10),
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Text(nCrDisc, style: styleWhite, textAlign: TextAlign.center,)
                ],
              ),
            )
          ],
        )
      ],
    );
  }

  // ----------------- nPr  --------------------
  Widget nprTab() {
    return ListView(
      children: [
        Image.asset('assets/images/photo3.jpg'),
        Column(
          children: [
            userInput(
                input1Disc: const Text("Sample Space:",
                  style: TextStyle(fontSize: 20, color: Colors.white),),
                tc1Input: SizedBox(
                  width: 120,
                  height: 50,
                  child: TextField(
                    controller: tc1, keyboardType: TextInputType.number,
                    cursorColor: Colors.red,
                    decoration: inputDec,
                    style: styleWhite,
                    textAlign: TextAlign.end,
                  ),
                ),
                input2Disc:  const Text("Number of Items:",
                  style: TextStyle(fontSize: 18, color: Colors.white),),
                tc2Input: SizedBox(
                  width: 120,
                  height: 50,
                  child: TextField(
                    controller: tc2, keyboardType: TextInputType.number,
                    cursorColor: Colors.red,
                    decoration: inputDec,
                    style: styleWhite,
                    textAlign: TextAlign.end,
                  ),
                )
            ),

            const Divider(
              height: 20,
              indent: 20,
              endIndent: 20,
              thickness: 2.0,
              color: Color(0xFFff0156),
            ),
            const Divider(
              height: 85,
              indent: 20,
              endIndent: 20,
              thickness: 2.0,
              color: Color(0x0F000000),
            ),

            Container(
              child: (
                  Column ( children: [
                    nPrCard(),
                  ])
              ),
            ),

            Row(
              crossAxisAlignment: CrossAxisAlignment.center,
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                // ----------- Buttons -------------
                ElevatedButton(
                  onPressed: nPrFunction,
                  style: ElevatedButton.styleFrom(
                    shape: RoundedRectangleBorder(
                      side: const BorderSide(
                        width: 2.0, // Border width
                        color: Color(0xFF120012), // Border color
                      ),
                      borderRadius: BorderRadius.circular(40.0), // Border radius
                    ),
                    backgroundColor: const Color(0xFF00ad34),
                  ),
                  child: const Text("nPr", style: TextStyle(
                      color: Colors.white,
                      fontSize: 22,
                      fontWeight: FontWeight.bold)
                  ),
                ),
                const Divider(
                    endIndent: 25,
                    thickness: 0.0
                ),
                ElevatedButton(
                    onPressed: onPressed,
                    style: ElevatedButton.styleFrom(
                      shape: RoundedRectangleBorder(
                        side: const BorderSide(
                          width: 2.0, // Border width
                          color: Color(0xFF120012), // Border color
                        ),
                        borderRadius: BorderRadius.circular(40.0), // Border radius
                      ),
                      backgroundColor: const Color(0xFF121212),
                    ),
                    child: const Text("C/A", style: TextStyle(
                        color: Color(0xFF870303),
                        fontSize: 22,
                        fontWeight: FontWeight.bold)
                    )
                ),
              ],),

            const Divider(
              height: 100,
              indent: 20,
              endIndent: 20,
              thickness: 0.0,
              color: Color(0x0F000000),

            ),
            Container(
              decoration: BoxDecoration(
                border: Border.all(color: const Color(0xFFff0156)),
                borderRadius: BorderRadius.circular(10.0),
              ),
              margin: const EdgeInsets.all(10),
              padding: const EdgeInsets.all(10),
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Text(nPrDisc, style: styleWhite, textAlign: TextAlign.center,)
                ],
              ),
            )
          ],
        )
      ],
    );
  }
  Widget facTab() {
    return ListView(
      children: [
        Image.asset('assets/images/photo2.jpg'),

        Column(
          children: [
            Container(
                padding: const EdgeInsets.all(10.0),
                decoration: BoxDecoration(
                  border: Border.all(color: const Color(0xFFff0156)),
                  borderRadius: BorderRadius.circular(10.0), // Border radius
                ),
                margin: const EdgeInsets.fromLTRB(10.0, 20.0, 10.0, 0.0),
                width: 320,
                child: Card(
                    color: Colors.transparent,
                    child: Row(
                        mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                        crossAxisAlignment: CrossAxisAlignment.center,
                        children: [
                          const Text("n! = ",
                            style: TextStyle(fontSize: 18, color: Colors.white),
                          ),
                          SizedBox(
                              width: 120,
                              child:
                              TextField(
                                controller: tc1, keyboardType: TextInputType.number,
                                cursorColor: Colors.red,
                                decoration: inputDec,
                                style: styleWhite,
                                textAlign: TextAlign.end,
                              )
                          ),
                        ]
                    )
                )
            ),
            const Divider(
              height: 20,
              indent: 20,
              endIndent: 20,
              thickness: 2.0,
              color: Color(0xFFff0156),
            ),
            const Divider(
              height: 85,
              indent: 20,
              endIndent: 20,
              thickness: 2.0,
              color: Color(0x0F000000),
            ),

            Container(
              child: (
                  Column ( children: [
                    Text(textValue,
                      style: const TextStyle(
                        color: Colors.white,
                        fontSize: 18.0,
                      ),),
                  ])
              ),
            ),

            // ----------- Buttons -------------
            Row(
              crossAxisAlignment: CrossAxisAlignment.center,
              mainAxisAlignment: MainAxisAlignment.center,
              children: [

                ElevatedButton(
                  onPressed: factFunction,
                  style: ElevatedButton.styleFrom(
                    shape: RoundedRectangleBorder(
                      side: const BorderSide(
                        width: 2.0, // Border width
                        color: Color(0xFF120012), // Border color
                      ),
                      borderRadius: BorderRadius.circular(40.0), // Border radius
                    ),
                    backgroundColor: const Color(0xFF00ad34),
                  ),
                  child: const Text("n!", style: TextStyle(
                      color: Colors.white,
                      fontSize: 22,
                      fontWeight: FontWeight.bold)
                  ),
                ),
                const Divider(
                    endIndent: 25,
                    thickness: 0.0
                ),
                ElevatedButton(
                    onPressed: onPressed,
                    style: ElevatedButton.styleFrom(
                      shape: RoundedRectangleBorder(
                        side: const BorderSide(
                          width: 2.0, // Border width
                          color: Color(0xFF120012), // Border color
                        ),
                        borderRadius: BorderRadius.circular(40.0), // Border radius
                      ),
                      backgroundColor: const Color(0xFF121212),
                    ),
                    child: const Text("C/A", style: TextStyle(
                        color: Color(0xFF870303),
                        fontSize: 22,
                        fontWeight: FontWeight.bold)
                    )
                ),
              ],),

            const Divider(
              height: 100,
              indent: 20,
              endIndent: 20,
              thickness: 0.0,
              color: Color(0x0F000000),

            ),
            Container(
              decoration: BoxDecoration(
                border: Border.all(color: const Color(0xFFff0156)),
                borderRadius: BorderRadius.circular(10.0),
              ),
              margin: const EdgeInsets.all(10),
              padding: const EdgeInsets.all(10),
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Text(factorialDisc, style: styleWhite, textAlign: TextAlign.center,)
                ],
              ),
            )
          ],
        )
      ],
    );
  }

  List<Widget> myTabWidgets(BuildContext content) {
    return <Widget>[
      calTab(),
      ncrTab(),
      nprTab(),
      facTab()
    ];
  }
// -----------  end of Widgets   ----------------
// ----------------------------------------------
// -----------   void Functions  ----------------


  void factFunction(){
    setState(() {
      int def1 = 1;
      var theValue = int.parse(tc1.text);

      for(int x = 1; x <= theValue; x++){
        def1 *= x;
      }
      fct = def1.toString();
      textValue = def1.toString();
    });
  }

  void nPrFunction(){
    setState(() {
      var nPr = 1;
      var rR = 1;
      // n
      var firstValue = int.parse(tc1.text);

      //r
      var secondValue = int.parse(tc2.text);

      // Calculate nPr (permutations)
      for (int x = firstValue; x > firstValue - secondValue; x--) {
        nPr *= x;
      }
      // n!
      for(int x = 1; x <= secondValue; x++){
        rR *= x;
      }
      nPr = nPr ~/ rR;
      textValue = nPr.toString();
    });
  }

  void nCrFunction(){
    setState(() {
      var nPr = 1;
      var rR = 1;
      // n
      var firstValue = int.parse(tc1.text);

      //r
      var secondValue = int.parse(tc2.text);

      // Calculate nPr (permutations)
      for (int x = firstValue; x > firstValue - secondValue; x--) {
        nPr *= x;
      }

      // n!
      for(int x = 1; x <= secondValue; x++){
        rR *= x;
      }
      var nCr = nPr ~/ rR;
      textValue = nCr.toString();
    });
  }

  // C/A Button 2
  void onPressed() {
    setState(() {
      tc1.text = '';
      tc2.text = '';
      textValue = "0";
    });
  }

  @override
  void initState() {
    super.initState();
    _tabController = TabController(length: topTab.length, vsync: this);
  }

  @override
  void dispose() {
    _tabController.dispose();
    super.dispose();
  }

  void _onBottomTap(int index) {
    setState((){
      _selectedIndex = index;
      _tabController.index = index;
    });
  }

// ----------      end Tab       ----------------
// ----------------------------------------------
// -----------   Drawer Build    ----------------

  Drawer myDrawer(BuildContext context) {
    return Drawer(
        backgroundColor: const Color(0xA6ffffff),
        child: ListView(
            children: [
              const SizedBox(
                  height: 100,
                  child: DrawerHeader(
                      decoration: BoxDecoration(
                        color: Colors.redAccent,
                      ),
                      child: Text("Calculate", style: TextStyle(color: Colors.white, fontSize: 28),))),
              SizedBox(
                child: Image.asset('assets/images/tabphoto.jpg'),
              ),
              ListTile(
                title: const Text("Calculator", style: TextStyle(
                  color: Colors.red,
                  fontWeight: FontWeight.bold,
                  fontSize: 22,
                ),
                ),
                onTap: () {
                  _onBottomTap(0);
                },
              ),
              ListTile(
                title: const Text("Computations", style: TextStyle(
                  color: Colors.red,
                  fontWeight: FontWeight.bold,
                  fontSize: 22,
                ),),
                onTap: () {
                  _onBottomTap(1);
                },
              ),
              ListTile(
                  title: const Text("Permutations", style: TextStyle(
                    color: Colors.red,
                    fontWeight: FontWeight.bold,
                    fontSize: 22,
                  ),),
                  onTap: () {
                    _onBottomTap(2);
                  }
              ),
              ListTile(
                  title: const Text("Factorial", style: TextStyle(
                    color: Colors.red,
                    fontWeight: FontWeight.bold,
                    fontSize: 22,
                  ),),
                  onTap: () {
                    _onBottomTap(3);
                  }
              ),
            ]
        ));
  }
// ----------     End Drawer     ----------------
// ----------------------------------------------
// ----------  Bottom Tab Build  ----------------

  BottomNavigationBar theBottomNavBar() {
    return BottomNavigationBar(
      showSelectedLabels: true,
      showUnselectedLabels: true,
      selectedItemColor: Colors.blueGrey,
      unselectedItemColor: Colors.white,
      items: const <BottomNavigationBarItem>[
        BottomNavigationBarItem(icon: Icon(Icons.calculate), label: "+/-", backgroundColor: Colors.redAccent),
        BottomNavigationBarItem(icon: Icon(Icons.show_chart), label: "nCr", backgroundColor: Colors.redAccent),
        BottomNavigationBarItem(icon: Icon(Icons.candlestick_chart), label: "nPr", backgroundColor: Colors.redAccent),
        BottomNavigationBarItem(icon: Icon(Icons.repeat), label: "n!", backgroundColor: Colors.redAccent),
      ],
      currentIndex: _selectedIndex,
      onTap: _onBottomTap,
    );

  }

// ----------   End Bottom Tab   ----------------
// ----------------------------------------------
// ----------    Build Content   ----------------
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.black,
      appBar: AppBar(
        backgroundColor: Colors.redAccent,
        title: const Text("My Calculator"),
        titleTextStyle: const TextStyle(color: Colors.white, fontSize: 30),
        centerTitle: true,
        bottom: TabBar(
          controller: _tabController,
          tabs: topTab,
          unselectedLabelColor: Colors.white,
          labelColor: Colors.blueGrey,
          indicatorColor: Colors.red.shade900,
          onTap: _onBottomTap,
          indicatorSize: TabBarIndicatorSize.tab,
        ),
      ),
      drawer: myDrawer(context),
      body: TabBarView(
          controller: _tabController, children: [
        calTab(),
        ncrTab(),
        nprTab(),
        facTab()
      ]),
      bottomNavigationBar: theBottomNavBar(),
    );
  }
}